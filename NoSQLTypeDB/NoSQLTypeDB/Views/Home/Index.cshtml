@using Newtonsoft.Json;
@using MongoDB.Bson;
@model List<BsonDocument>?

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Database</title>
    <style>
        html, body {
            width: 100%;
            height: 100%;
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
            overflow: auto;
        }

        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 20px;
        }

        .buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

            .buttons button {
                padding: 10px 20px;
                font-size: 16px;
                cursor: pointer;
                border: none;
                border-radius: 5px;
            }

                .buttons button:nth-child(1) {
                    background-color: #2196F3;
                    color: white;
                }

                .buttons button:nth-child(2) {
                    background-color: #4CAF50;
                    color: white;
                }

        .json-container {
            display: flex;
            flex-direction: column;
            width: 100%;
            height: calc(100vh - 120px); /* Adjust height to fit within viewport minus other elements */
            overflow: auto; /* Enable scrolling within this container */
        }

        .json-item {
            background-color: white;
            border: 1px solid #ddd;
            padding: 10px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .json-content {
            flex-grow: 1;
            margin-right: 10px;
        }

        .json-actions {
            display: flex;
            gap: 10px;
        }

            .json-actions button {
                padding: 5px 10px;
                font-size: 14px;
                cursor: pointer;
                border: none;
                border-radius: 5px;
            }

                .json-actions button:nth-child(1) {
                    background-color: #FFC107;
                    color: white;
                }

                .json-actions button:nth-child(2) {
                    background-color: #F44336;
                    color: white;
                }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            width: 25%;
            height: 25%;
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            justify-content: center;
        }

            .modal-content input[type="text"] {
                padding: 10px;
                font-size: 16px;
            }

            .modal-content button {
                padding: 10px;
                font-size: 16px;
                cursor: pointer;
                border: none;
                border-radius: 5px;
            }

                .modal-content button.confirm {
                    background-color: #4CAF50;
                    color: white;
                }

                .modal-content button.cancel {
                    background-color: #F44336;
                    color: white;
                }

    </style>
</head>
<body>
    <div class="container">
        <div class="buttons">
            <button id="addBtn">+</button>
        </div>
        <div class="json-container">
            @if (Model != null)
            {
                @foreach (var document in Model)
                {
                    var id = document["_id"].AsObjectId.ToString();
                    <div class="json-item">
                        <div class="json-content">
                            @Html.Raw(DisplayBsonValue(document))
                        </div>
                        <div class="json-actions">
                            <button class="update-btn" data-id="@id" data-json="@document.ToJson()">Update</button>
                            <button class="delete-btn" data-id="@id">Delete</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div class="modal" id="modal">
        <div class="modal-content">
            <form id="modalForm">
                <label for="fieldText">Field Text:</label>
                <input type="text" id="fieldText" name="fieldText" required>
                <div>
                    <button type="button" class="confirm" id="confirmBtn">Confirm</button>
                    <button type="button" class="cancel" id="cancelBtn">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <div class="modal" id="updateModal">
        <div class="modal-content">
            <form id="updateForm">
                <label for="updateFieldText">Field Text:</label>
                <input type="text" id="updateFieldText" name="fieldText" required>
                <input type="hidden" id="updateId">
                <div>
                    <button type="button" class="confirm" id="updateConfirmBtn">Update</button>
                    <button type="button" class="cancel" id="updateCancelBtn">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Get modal elements
        const modal = document.getElementById('modal');
        const addBtn = document.getElementById('addBtn');
        const cancelBtn = document.getElementById('cancelBtn');
        const confirmBtn = document.getElementById('confirmBtn');

        const updateModal = document.getElementById('updateModal');
        const updateBtns = document.querySelectorAll('.update-btn');
        const updateCancelBtn = document.getElementById('updateCancelBtn');
        const updateConfirmBtn = document.getElementById('updateConfirmBtn');
        const updateFieldText = document.getElementById('updateFieldText');
        const updateId = document.getElementById('updateId');

        // Show update modal
        updateBtns.forEach(button => {
            button.addEventListener('click', (event) => {
                const id = event.target.getAttribute('data-id');
                const json = event.target.getAttribute('data-json');
                updateFieldText.value = json;
                updateId.value = id;
                updateModal.style.display = 'flex';
            });
        });

        // Hide update modal when clicking cancel
        updateCancelBtn.addEventListener('click', () => {
            updateModal.style.display = 'none';
        });

        // Handle update confirm button click
        updateConfirmBtn.addEventListener('click', () => {
            const id = updateId.value;
            const fieldText = updateFieldText.value;
            if (fieldText) {
                const jsonObject = { fieldText: fieldText };

                fetch(`/Home/UpdateDocument/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(jsonObject)
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error(response);
                        }
                    })
                    .then(data => {
                        console.log('Success:', data);
                        updateModal.style.display = 'none';
                        window.location.href = '/Home/Index';
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }
        });

        // Hide modal when clicking outside of it
        window.addEventListener('click', (event) => {
            if (event.target === updateModal) {
                updateModal.style.display = 'none';
            }
        });

        // Update button click handler
        document.querySelectorAll('.update-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                // Handle update logic here, if needed
            });
        });

        // Delete button click handler
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const documentId = btn.getAttribute('data-id');

                fetch(`/Home/DeleteDocument?id=${documentId}`, {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error('Something went wrong');
                        }
                    })
                    .then(data => {
                        console.log('Success:', data);
                        window.location.href = '/Home/Index';  // Redirect to the Index action
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });
        });

        // Show modal
        addBtn.addEventListener('click', () => {
            modal.style.display = 'flex';
        });

        // Hide modal when clicking outside of it
        window.addEventListener('click', (event) => {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });

        // Hide modal when clicking cancel
        cancelBtn.addEventListener('click', () => {
            modal.style.display = 'none';
        });

        // Handle confirm button click
        confirmBtn.addEventListener('click', () => {
            const fieldText = document.getElementById('fieldText').value;
            if (fieldText) {
                // Convert the fieldText to JSON
                const jsonObject = { fieldText: fieldText };

                // Send the JSON to the server
                fetch('/Home/AddDocument', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(jsonObject)
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error('Something went wrong');
                        }
                    })
                    .then(data => {
                        console.log('Success:', data);
                        modal.style.display = 'none';
                        window.location.href = '/Home/Index';  // Redirect to the Index action
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }
        });
    </script>
</body>
</html>

@functions {
    string DisplayBsonValue(BsonValue value, int indentLevel = 0, bool isInArray = false)
    {
        var result = new System.Text.StringBuilder();

        if (value.IsBsonDocument)
        {
            if (indentLevel > 0 && !isInArray)
            {
                result.Append("<br />");
            }

            foreach (var element in value.AsBsonDocument)
            {
                result.Append(new string('ㅤ', indentLevel * 2) + $"{element.Name} : ");
                result.Append(DisplayBsonValue(element.Value, indentLevel + 1));
            }
        }
        else if (value.IsBsonArray)
        {
            if (indentLevel > 0) // Добавляем <br /> только если это не начало документа
            {
                result.Append("<br />");
            }

            foreach (var item in value.AsBsonArray)
            {
                result.Append(DisplayBsonValue(item, indentLevel + 1, isInArray: true));
            }
        }
        else
        {
            result.Append(value.ToString() + "<br />");
        }

        return result.ToString();
    }
}
